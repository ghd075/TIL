<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
<!-- 컴포넌트 스캔 설정 -->
<context:component-scan base-package="com.springbook.biz"/>
<!-- <context:component-scan base-package="polymorphism"/> -->
<!-- AOP 설정  -->
<!-- AOP 관련 어노테이션들을 인식하고 용도에 맞게 처리해줌 -->
<aop:aspectj-autoproxy/>
<!-- 파일 업로드 설정 -->
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<property name="maxInMemorySize" value="102400"/>
	<property name="maxUploadSizePerFile" value="1024000"/>
</bean>
<!-- 커넥션 풀 설정 -->
<context:property-placeholder location="classpath:config/database.properties"/>
<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> -->
<bean id="dataSourceSpied" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	<property name="driverClassName" value="${jdbc.driver}"/>
	<property name="url" value="${jdbc.url}"/>
	<property name="username" value="${jdbc.username}"/>
	<property name="password" value="${jdbc.password}"/>
	<property name="maxActive" value="20"></property> <!-- 접속가능한 유저수 -->
	<property name="maxWait" value="1000"></property> <!-- 최대 대기시간 설정 (1000 = 1초) -->
</bean>
<!-- JDBC 로그 설정 -->
<bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
	<constructor-arg ref="dataSourceSpied" />
	<property name="logFormatter">
		<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
			<property name="loggingType" value="MULTI_LINE" />
			<property name="sqlPrefix" value="SQL:::" />
		</bean>
	</property>
</bean>
<!-- Transaction Manager 설정 -->
<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource" />
</bean>	
	
<!-- Transaction Advice 설정 -->
<tx:advice id="txAdvice" transaction-manager="txManager">
	<tx:attributes>
		<tx:method name="get*" read-only="true" />
		<tx:method name="*"/>
	</tx:attributes>
</tx:advice>
	
<!-- Transaction AOP 설정 -->
<aop:config>
	<aop:pointcut expression="execution(public * com..*(..))" id="txPointCut"/>
	<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
</aop:config>

<!-- JDBC(Template) 빈 등록 -->
<!-- 정형화된 java jdbc를 대신 처리 -->
<bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
	<property name="dataSource" ref="dataSource"></property>
</bean>
<!-- 새로운 스프링 컨테이너 포함 -->
<import resource="context-datasource.xml"/>
<!-- <import resource="context-aop.xml"/> -->

<!-- bean 생성(해당 클래스가 객체 생성시 자동으로 디폴트 생성자를 생성하면 메모리 공간에 할당함) -->
<!-- <bean class="polymorphism.SonySpeaker" id="speaker"></bean>
<bean class="polymorphism.SamsungTV" id ="tv" 
	  init-method="initMethod" 
	  destroy-method="destroyMethod" 
	  lazy-init="true" scope="prototype" p:speaker-ref="speaker" p:price="5000">
	  p 네임스페이스 사용
	   생성자 인젝션 사용
	  <constructor-arg ref="speaker"/>
	  <constructor-arg value="2000"/>
	  설정자 인젝션 사용
	  <property name="speaker" ref="speaker"></property> SetSpeaker () 호출
	  <property name="price" value="3000"></property>
</bean> -->	  
</beans>
